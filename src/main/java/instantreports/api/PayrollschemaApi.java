/**
 * CPM API
 * Public API for CPM
 *
 * OpenAPI spec version: V1.0
 * Contact: info@addison.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package instantreports.api;

import instantreports.ApiCallback;
import instantreports.ApiClient;
import instantreports.ApiException;
import instantreports.ApiResponse;
import instantreports.Configuration;
import instantreports.Pair;
import instantreports.ProgressRequestBody;
import instantreports.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import instantreports.model.Lohnart;
import instantreports.model.Lohnartenplan;
import instantreports.model.Lohnartmerged;
import instantreports.model.Template;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayrollschemaApi {
    private ApiClient apiClient;

    public PayrollschemaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayrollschemaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for payrollSchemaLohnartGet */
    private com.squareup.okhttp.Call payrollSchemaLohnartGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaLohnartGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaLohnartGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/lohnart".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll_schema/lohnart
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Lohnart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Lohnart payrollSchemaLohnartGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Lohnart> resp = payrollSchemaLohnartGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    /**
     * get: payroll_schema/lohnart
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Lohnart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Lohnart> payrollSchemaLohnartGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaLohnartGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Lohnart>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll_schema/lohnart (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaLohnartGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Lohnart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaLohnartGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lohnart>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollSchemaLohnartResourceIdGet */
    private com.squareup.okhttp.Call payrollSchemaLohnartResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaLohnartResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaLohnartResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollSchemaLohnartResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/lohnart/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll_schema/lohnart/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Lohnart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Lohnart payrollSchemaLohnartResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Lohnart> resp = payrollSchemaLohnartResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: payroll_schema/lohnart/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Lohnart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Lohnart> payrollSchemaLohnartResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaLohnartResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Lohnart>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll_schema/lohnart/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaLohnartResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Lohnart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaLohnartResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lohnart>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollSchemaLohnartResourceIdPut */
    private com.squareup.okhttp.Call payrollSchemaLohnartResourceIdPutCall(String authorization, String organization, String resourceId, Lohnart body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaLohnartResourceIdPut(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaLohnartResourceIdPut(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollSchemaLohnartResourceIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling payrollSchemaLohnartResourceIdPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/lohnart/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * put: payroll_schema/lohnart
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void payrollSchemaLohnartResourceIdPut(String authorization, String organization, String resourceId, Lohnart body) throws ApiException {
        payrollSchemaLohnartResourceIdPutWithHttpInfo(authorization, organization, resourceId, body);
    }

    /**
     * put: payroll_schema/lohnart
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> payrollSchemaLohnartResourceIdPutWithHttpInfo(String authorization, String organization, String resourceId, Lohnart body) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaLohnartResourceIdPutCall(authorization, organization, resourceId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * put: payroll_schema/lohnart (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaLohnartResourceIdPutAsync(String authorization, String organization, String resourceId, Lohnart body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaLohnartResourceIdPutCall(authorization, organization, resourceId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for payrollSchemaLohnartenplanGet */
    private com.squareup.okhttp.Call payrollSchemaLohnartenplanGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaLohnartenplanGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaLohnartenplanGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/lohnartenplan".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll_schema/lohnartenplan
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Lohnartenplan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Lohnartenplan payrollSchemaLohnartenplanGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Lohnartenplan> resp = payrollSchemaLohnartenplanGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    /**
     * get: payroll_schema/lohnartenplan
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Lohnartenplan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Lohnartenplan> payrollSchemaLohnartenplanGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaLohnartenplanGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Lohnartenplan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll_schema/lohnartenplan (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaLohnartenplanGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Lohnartenplan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaLohnartenplanGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lohnartenplan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollSchemaLohnartenplanResourceIdGet */
    private com.squareup.okhttp.Call payrollSchemaLohnartenplanResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaLohnartenplanResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaLohnartenplanResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollSchemaLohnartenplanResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/lohnartenplan/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll_schema/lohnartenplan/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Lohnartenplan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Lohnartenplan payrollSchemaLohnartenplanResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Lohnartenplan> resp = payrollSchemaLohnartenplanResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: payroll_schema/lohnartenplan/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Lohnartenplan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Lohnartenplan> payrollSchemaLohnartenplanResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaLohnartenplanResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Lohnartenplan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll_schema/lohnartenplan/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaLohnartenplanResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Lohnartenplan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaLohnartenplanResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lohnartenplan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollSchemaLohnartenplanResourceIdPut */
    private com.squareup.okhttp.Call payrollSchemaLohnartenplanResourceIdPutCall(String authorization, String organization, String resourceId, Lohnartenplan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaLohnartenplanResourceIdPut(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaLohnartenplanResourceIdPut(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollSchemaLohnartenplanResourceIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling payrollSchemaLohnartenplanResourceIdPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/lohnartenplan/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * put: payroll_schema/lohnartenplan
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void payrollSchemaLohnartenplanResourceIdPut(String authorization, String organization, String resourceId, Lohnartenplan body) throws ApiException {
        payrollSchemaLohnartenplanResourceIdPutWithHttpInfo(authorization, organization, resourceId, body);
    }

    /**
     * put: payroll_schema/lohnartenplan
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> payrollSchemaLohnartenplanResourceIdPutWithHttpInfo(String authorization, String organization, String resourceId, Lohnartenplan body) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaLohnartenplanResourceIdPutCall(authorization, organization, resourceId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * put: payroll_schema/lohnartenplan (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaLohnartenplanResourceIdPutAsync(String authorization, String organization, String resourceId, Lohnartenplan body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaLohnartenplanResourceIdPutCall(authorization, organization, resourceId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for payrollSchemaLohnartmergedGet */
    private com.squareup.okhttp.Call payrollSchemaLohnartmergedGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaLohnartmergedGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaLohnartmergedGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/lohnartmerged".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll_schema/lohnartmerged
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Lohnartmerged
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Lohnartmerged payrollSchemaLohnartmergedGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Lohnartmerged> resp = payrollSchemaLohnartmergedGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    /**
     * get: payroll_schema/lohnartmerged
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Lohnartmerged&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Lohnartmerged> payrollSchemaLohnartmergedGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaLohnartmergedGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Lohnartmerged>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll_schema/lohnartmerged (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaLohnartmergedGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Lohnartmerged> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaLohnartmergedGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lohnartmerged>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollSchemaLohnartmergedResourceIdGet */
    private com.squareup.okhttp.Call payrollSchemaLohnartmergedResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaLohnartmergedResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaLohnartmergedResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollSchemaLohnartmergedResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/lohnartmerged/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll_schema/lohnartmerged/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Lohnartmerged
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Lohnartmerged payrollSchemaLohnartmergedResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Lohnartmerged> resp = payrollSchemaLohnartmergedResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: payroll_schema/lohnartmerged/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Lohnartmerged&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Lohnartmerged> payrollSchemaLohnartmergedResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaLohnartmergedResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Lohnartmerged>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll_schema/lohnartmerged/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaLohnartmergedResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Lohnartmerged> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaLohnartmergedResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lohnartmerged>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollSchemaLohnartmergedResourceIdPut */
    private com.squareup.okhttp.Call payrollSchemaLohnartmergedResourceIdPutCall(String authorization, String organization, String resourceId, Lohnartmerged body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaLohnartmergedResourceIdPut(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaLohnartmergedResourceIdPut(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollSchemaLohnartmergedResourceIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling payrollSchemaLohnartmergedResourceIdPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/lohnartmerged/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * put: payroll_schema/lohnartmerged
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void payrollSchemaLohnartmergedResourceIdPut(String authorization, String organization, String resourceId, Lohnartmerged body) throws ApiException {
        payrollSchemaLohnartmergedResourceIdPutWithHttpInfo(authorization, organization, resourceId, body);
    }

    /**
     * put: payroll_schema/lohnartmerged
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> payrollSchemaLohnartmergedResourceIdPutWithHttpInfo(String authorization, String organization, String resourceId, Lohnartmerged body) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaLohnartmergedResourceIdPutCall(authorization, organization, resourceId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * put: payroll_schema/lohnartmerged (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaLohnartmergedResourceIdPutAsync(String authorization, String organization, String resourceId, Lohnartmerged body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaLohnartmergedResourceIdPutCall(authorization, organization, resourceId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for payrollSchemaResourcePost */
    private com.squareup.okhttp.Call payrollSchemaResourcePostCall(String authorization, String organization, String resource, Lohnart body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaResourcePost(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaResourcePost(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling payrollSchemaResourcePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling payrollSchemaResourcePost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/{resource}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resource" + "\\}", apiClient.escapeString(resource.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * post: payroll_schema/lohnart
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resource The Api-Contract name (required)
     * @param body Input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void payrollSchemaResourcePost(String authorization, String organization, String resource, Lohnart body) throws ApiException {
        payrollSchemaResourcePostWithHttpInfo(authorization, organization, resource, body);
    }

    /**
     * post: payroll_schema/lohnart
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resource The Api-Contract name (required)
     * @param body Input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> payrollSchemaResourcePostWithHttpInfo(String authorization, String organization, String resource, Lohnart body) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaResourcePostCall(authorization, organization, resource, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * post: payroll_schema/lohnart (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resource The Api-Contract name (required)
     * @param body Input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaResourcePostAsync(String authorization, String organization, String resource, Lohnart body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaResourcePostCall(authorization, organization, resource, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for payrollSchemaTemplateGet */
    private com.squareup.okhttp.Call payrollSchemaTemplateGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaTemplateGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaTemplateGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/template".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll_schema/template
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Template
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Template payrollSchemaTemplateGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Template> resp = payrollSchemaTemplateGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    /**
     * get: payroll_schema/template
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Template> payrollSchemaTemplateGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaTemplateGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll_schema/template (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaTemplateGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Template> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaTemplateGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollSchemaTemplateResourceIdGet */
    private com.squareup.okhttp.Call payrollSchemaTemplateResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaTemplateResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaTemplateResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollSchemaTemplateResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/template/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll_schema/template/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Template
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Template payrollSchemaTemplateResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Template> resp = payrollSchemaTemplateResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: payroll_schema/template/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Template&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Template> payrollSchemaTemplateResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaTemplateResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll_schema/template/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaTemplateResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Template> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaTemplateResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollSchemaTemplateResourceIdPut */
    private com.squareup.okhttp.Call payrollSchemaTemplateResourceIdPutCall(String authorization, String organization, String resourceId, Template body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSchemaTemplateResourceIdPut(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSchemaTemplateResourceIdPut(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollSchemaTemplateResourceIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling payrollSchemaTemplateResourceIdPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll_schema/template/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * put: payroll_schema/template
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void payrollSchemaTemplateResourceIdPut(String authorization, String organization, String resourceId, Template body) throws ApiException {
        payrollSchemaTemplateResourceIdPutWithHttpInfo(authorization, organization, resourceId, body);
    }

    /**
     * put: payroll_schema/template
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> payrollSchemaTemplateResourceIdPutWithHttpInfo(String authorization, String organization, String resourceId, Template body) throws ApiException {
        com.squareup.okhttp.Call call = payrollSchemaTemplateResourceIdPutCall(authorization, organization, resourceId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * put: payroll_schema/template (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSchemaTemplateResourceIdPutAsync(String authorization, String organization, String resourceId, Template body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSchemaTemplateResourceIdPutCall(authorization, organization, resourceId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
