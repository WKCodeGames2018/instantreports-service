/**
 * CPM API
 * Public API for CPM
 *
 * OpenAPI spec version: V1.0
 * Contact: info@addison.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package instantreports.api;

import com.google.gson.reflect.TypeToken;
import instantreports.ApiCallback;
import instantreports.ApiClient;
import instantreports.ApiException;
import instantreports.ApiResponse;
import instantreports.Configuration;
import instantreports.Pair;
import instantreports.ProgressRequestBody;
import instantreports.ProgressResponseBody;
import instantreports.model.Firmendaten;
import instantreports.model.Lohnerfassungsschluessel;
import instantreports.model.Mitarbeiter;
import instantreports.model.Personalfragebogen;
import instantreports.model.Sofortmeldung;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayrollApi {
    private ApiClient apiClient;

    public PayrollApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayrollApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for payrollFirmendatenGet */
    private com.squareup.okhttp.Call payrollFirmendatenGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollFirmendatenGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollFirmendatenGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/firmendaten".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll/firmendaten
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Firmendaten
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Firmendaten payrollFirmendatenGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Firmendaten> resp = payrollFirmendatenGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    /**
     * get: payroll/firmendaten
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Firmendaten&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Firmendaten> payrollFirmendatenGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = payrollFirmendatenGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Firmendaten>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll/firmendaten (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollFirmendatenGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Firmendaten> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollFirmendatenGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Firmendaten>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollFirmendatenResourceIdGet */
    private com.squareup.okhttp.Call payrollFirmendatenResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollFirmendatenResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollFirmendatenResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollFirmendatenResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/firmendaten/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll/firmendaten/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Firmendaten
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Firmendaten payrollFirmendatenResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Firmendaten> resp = payrollFirmendatenResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: payroll/firmendaten/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Firmendaten&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Firmendaten> payrollFirmendatenResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = payrollFirmendatenResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Firmendaten>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll/firmendaten/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollFirmendatenResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Firmendaten> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollFirmendatenResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Firmendaten>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollLohnerfassungsschluesselGet */
    private com.squareup.okhttp.Call payrollLohnerfassungsschluesselGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollLohnerfassungsschluesselGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollLohnerfassungsschluesselGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/lohnerfassungsschluessel".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll/lohnerfassungsschluessel
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Lohnerfassungsschluessel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Lohnerfassungsschluessel payrollLohnerfassungsschluesselGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Lohnerfassungsschluessel> resp = payrollLohnerfassungsschluesselGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    /**
     * get: payroll/lohnerfassungsschluessel
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Lohnerfassungsschluessel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Lohnerfassungsschluessel> payrollLohnerfassungsschluesselGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = payrollLohnerfassungsschluesselGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Lohnerfassungsschluessel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll/lohnerfassungsschluessel (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollLohnerfassungsschluesselGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Lohnerfassungsschluessel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollLohnerfassungsschluesselGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lohnerfassungsschluessel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollLohnerfassungsschluesselResourceIdGet */
    private com.squareup.okhttp.Call payrollLohnerfassungsschluesselResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollLohnerfassungsschluesselResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollLohnerfassungsschluesselResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollLohnerfassungsschluesselResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/lohnerfassungsschluessel/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll/lohnerfassungsschluessel/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Lohnerfassungsschluessel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Lohnerfassungsschluessel payrollLohnerfassungsschluesselResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Lohnerfassungsschluessel> resp = payrollLohnerfassungsschluesselResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: payroll/lohnerfassungsschluessel/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Lohnerfassungsschluessel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Lohnerfassungsschluessel> payrollLohnerfassungsschluesselResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = payrollLohnerfassungsschluesselResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Lohnerfassungsschluessel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll/lohnerfassungsschluessel/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollLohnerfassungsschluesselResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Lohnerfassungsschluessel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollLohnerfassungsschluesselResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lohnerfassungsschluessel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollLohnerfassungsschluesselResourceIdPut */
    private com.squareup.okhttp.Call payrollLohnerfassungsschluesselResourceIdPutCall(String authorization, String organization, String resourceId, Lohnerfassungsschluessel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollLohnerfassungsschluesselResourceIdPut(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollLohnerfassungsschluesselResourceIdPut(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollLohnerfassungsschluesselResourceIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling payrollLohnerfassungsschluesselResourceIdPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/lohnerfassungsschluessel/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * put: payroll/lohnerfassungsschluessel
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void payrollLohnerfassungsschluesselResourceIdPut(String authorization, String organization, String resourceId, Lohnerfassungsschluessel body) throws ApiException {
        payrollLohnerfassungsschluesselResourceIdPutWithHttpInfo(authorization, organization, resourceId, body);
    }

    /**
     * put: payroll/lohnerfassungsschluessel
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> payrollLohnerfassungsschluesselResourceIdPutWithHttpInfo(String authorization, String organization, String resourceId, Lohnerfassungsschluessel body) throws ApiException {
        com.squareup.okhttp.Call call = payrollLohnerfassungsschluesselResourceIdPutCall(authorization, organization, resourceId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * put: payroll/lohnerfassungsschluessel (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollLohnerfassungsschluesselResourceIdPutAsync(String authorization, String organization, String resourceId, Lohnerfassungsschluessel body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollLohnerfassungsschluesselResourceIdPutCall(authorization, organization, resourceId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for payrollMitarbeiterGet */
    private com.squareup.okhttp.Call payrollMitarbeiterGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollMitarbeiterGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollMitarbeiterGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/mitarbeiter".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll/mitarbeiter
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Mitarbeiter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Mitarbeiter payrollMitarbeiterGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Mitarbeiter> resp = payrollMitarbeiterGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    /**
     * get: payroll/mitarbeiter
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Mitarbeiter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Mitarbeiter> payrollMitarbeiterGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = payrollMitarbeiterGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Mitarbeiter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll/mitarbeiter (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollMitarbeiterGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Mitarbeiter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollMitarbeiterGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Mitarbeiter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollMitarbeiterResourceIdGet */
    private com.squareup.okhttp.Call payrollMitarbeiterResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollMitarbeiterResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollMitarbeiterResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollMitarbeiterResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/mitarbeiter/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll/mitarbeiter/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Mitarbeiter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Mitarbeiter payrollMitarbeiterResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Mitarbeiter> resp = payrollMitarbeiterResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: payroll/mitarbeiter/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Mitarbeiter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Mitarbeiter> payrollMitarbeiterResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = payrollMitarbeiterResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Mitarbeiter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll/mitarbeiter/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollMitarbeiterResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Mitarbeiter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollMitarbeiterResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Mitarbeiter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollMitarbeiterResourceIdPut */
    private com.squareup.okhttp.Call payrollMitarbeiterResourceIdPutCall(String authorization, String organization, String resourceId, Mitarbeiter body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollMitarbeiterResourceIdPut(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollMitarbeiterResourceIdPut(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollMitarbeiterResourceIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling payrollMitarbeiterResourceIdPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/mitarbeiter/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * put: payroll/mitarbeiter
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void payrollMitarbeiterResourceIdPut(String authorization, String organization, String resourceId, Mitarbeiter body) throws ApiException {
        payrollMitarbeiterResourceIdPutWithHttpInfo(authorization, organization, resourceId, body);
    }

    /**
     * put: payroll/mitarbeiter
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> payrollMitarbeiterResourceIdPutWithHttpInfo(String authorization, String organization, String resourceId, Mitarbeiter body) throws ApiException {
        com.squareup.okhttp.Call call = payrollMitarbeiterResourceIdPutCall(authorization, organization, resourceId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * put: payroll/mitarbeiter (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollMitarbeiterResourceIdPutAsync(String authorization, String organization, String resourceId, Mitarbeiter body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollMitarbeiterResourceIdPutCall(authorization, organization, resourceId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for payrollPersonalfragebogenGet */
    private com.squareup.okhttp.Call payrollPersonalfragebogenGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollPersonalfragebogenGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollPersonalfragebogenGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/personalfragebogen".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll/personalfragebogen
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Personalfragebogen
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Personalfragebogen payrollPersonalfragebogenGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Personalfragebogen> resp = payrollPersonalfragebogenGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    /**
     * get: payroll/personalfragebogen
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Personalfragebogen&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Personalfragebogen> payrollPersonalfragebogenGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = payrollPersonalfragebogenGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Personalfragebogen>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll/personalfragebogen (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollPersonalfragebogenGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Personalfragebogen> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollPersonalfragebogenGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Personalfragebogen>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollPersonalfragebogenResourceIdGet */
    private com.squareup.okhttp.Call payrollPersonalfragebogenResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollPersonalfragebogenResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollPersonalfragebogenResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollPersonalfragebogenResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/personalfragebogen/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll/personalfragebogen/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Personalfragebogen
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Personalfragebogen payrollPersonalfragebogenResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Personalfragebogen> resp = payrollPersonalfragebogenResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: payroll/personalfragebogen/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Personalfragebogen&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Personalfragebogen> payrollPersonalfragebogenResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = payrollPersonalfragebogenResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Personalfragebogen>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll/personalfragebogen/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollPersonalfragebogenResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Personalfragebogen> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollPersonalfragebogenResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Personalfragebogen>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollPersonalfragebogenResourceIdPut */
    private com.squareup.okhttp.Call payrollPersonalfragebogenResourceIdPutCall(String authorization, String organization, String resourceId, Personalfragebogen body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollPersonalfragebogenResourceIdPut(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollPersonalfragebogenResourceIdPut(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollPersonalfragebogenResourceIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling payrollPersonalfragebogenResourceIdPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/personalfragebogen/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * put: payroll/personalfragebogen
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void payrollPersonalfragebogenResourceIdPut(String authorization, String organization, String resourceId, Personalfragebogen body) throws ApiException {
        payrollPersonalfragebogenResourceIdPutWithHttpInfo(authorization, organization, resourceId, body);
    }

    /**
     * put: payroll/personalfragebogen
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> payrollPersonalfragebogenResourceIdPutWithHttpInfo(String authorization, String organization, String resourceId, Personalfragebogen body) throws ApiException {
        com.squareup.okhttp.Call call = payrollPersonalfragebogenResourceIdPutCall(authorization, organization, resourceId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * put: payroll/personalfragebogen (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param body Input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollPersonalfragebogenResourceIdPutAsync(String authorization, String organization, String resourceId, Personalfragebogen body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollPersonalfragebogenResourceIdPutCall(authorization, organization, resourceId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for payrollResourcePost */
    private com.squareup.okhttp.Call payrollResourcePostCall(String authorization, String organization, String resource, Mitarbeiter body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollResourcePost(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollResourcePost(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling payrollResourcePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling payrollResourcePost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/{resource}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resource" + "\\}", apiClient.escapeString(resource.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * post: payroll/mitarbeiter
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resource The Api-Contract name (required)
     * @param body Input. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void payrollResourcePost(String authorization, String organization, String resource, Mitarbeiter body) throws ApiException {
        payrollResourcePostWithHttpInfo(authorization, organization, resource, body);
    }

    /**
     * post: payroll/mitarbeiter
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resource The Api-Contract name (required)
     * @param body Input. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> payrollResourcePostWithHttpInfo(String authorization, String organization, String resource, Mitarbeiter body) throws ApiException {
        com.squareup.okhttp.Call call = payrollResourcePostCall(authorization, organization, resource, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * post: payroll/mitarbeiter (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resource The Api-Contract name (required)
     * @param body Input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollResourcePostAsync(String authorization, String organization, String resource, Mitarbeiter body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollResourcePostCall(authorization, organization, resource, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for payrollSofortmeldungGet */
    private com.squareup.okhttp.Call payrollSofortmeldungGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSofortmeldungGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSofortmeldungGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/sofortmeldung".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll/instantmessage
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Sofortmeldung
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sofortmeldung payrollSofortmeldungGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Sofortmeldung> resp = payrollSofortmeldungGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    public void payrollSofortMeldungPost(String authorization, String oragnization, Sofortmeldung sofortmeldung) throws ApiException {

    }

    /**
     * get: payroll/instantmessage
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Sofortmeldung&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sofortmeldung> payrollSofortmeldungGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = payrollSofortmeldungGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Sofortmeldung>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll/instantmessage (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSofortmeldungGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Sofortmeldung> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSofortmeldungGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Sofortmeldung>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for payrollSofortmeldungResourceIdGet */
    private com.squareup.okhttp.Call payrollSofortmeldungResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling payrollSofortmeldungResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling payrollSofortmeldungResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling payrollSofortmeldungResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/payroll/sofortmeldung/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: payroll/instantmessage/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Sofortmeldung
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sofortmeldung payrollSofortmeldungResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Sofortmeldung> resp = payrollSofortmeldungResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: payroll/instantmessage/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Sofortmeldung&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sofortmeldung> payrollSofortmeldungResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = payrollSofortmeldungResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Sofortmeldung>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: payroll/instantmessage/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call payrollSofortmeldungResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Sofortmeldung> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = payrollSofortmeldungResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Sofortmeldung>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
