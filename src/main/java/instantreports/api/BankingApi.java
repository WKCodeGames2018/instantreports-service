/**
 * CPM API
 * Public API for CPM
 *
 * OpenAPI spec version: V1.0
 * Contact: info@addison.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package instantreports.api;

import instantreports.ApiCallback;
import instantreports.ApiClient;
import instantreports.ApiException;
import instantreports.ApiResponse;
import instantreports.Configuration;
import instantreports.Pair;
import instantreports.ProgressRequestBody;
import instantreports.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import instantreports.model.Bankaccount;
import instantreports.model.Bankingprovision;
import instantreports.model.Payment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BankingApi {
    private ApiClient apiClient;

    public BankingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BankingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for bankingBankaccountGet */
    private com.squareup.okhttp.Call bankingBankaccountGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling bankingBankaccountGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling bankingBankaccountGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/banking/bankaccount".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: banking/bankaccount
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Bankaccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Bankaccount bankingBankaccountGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Bankaccount> resp = bankingBankaccountGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    /**
     * get: banking/bankaccount
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Bankaccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Bankaccount> bankingBankaccountGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = bankingBankaccountGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Bankaccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: banking/bankaccount (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bankingBankaccountGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Bankaccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bankingBankaccountGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Bankaccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for bankingBankaccountResourceIdGet */
    private com.squareup.okhttp.Call bankingBankaccountResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling bankingBankaccountResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling bankingBankaccountResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling bankingBankaccountResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/banking/bankaccount/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: banking/bankaccount/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Bankaccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Bankaccount bankingBankaccountResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Bankaccount> resp = bankingBankaccountResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: banking/bankaccount/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Bankaccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Bankaccount> bankingBankaccountResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = bankingBankaccountResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Bankaccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: banking/bankaccount/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bankingBankaccountResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Bankaccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bankingBankaccountResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Bankaccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for bankingBankingprovisionGet */
    private com.squareup.okhttp.Call bankingBankingprovisionGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling bankingBankingprovisionGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling bankingBankingprovisionGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/banking/bankingprovision".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: banking/bankingprovision
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Bankingprovision
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Bankingprovision bankingBankingprovisionGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Bankingprovision> resp = bankingBankingprovisionGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    /**
     * get: banking/bankingprovision
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Bankingprovision&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Bankingprovision> bankingBankingprovisionGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = bankingBankingprovisionGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Bankingprovision>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: banking/bankingprovision (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bankingBankingprovisionGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Bankingprovision> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bankingBankingprovisionGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Bankingprovision>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for bankingBankingprovisionResourceIdGet */
    private com.squareup.okhttp.Call bankingBankingprovisionResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling bankingBankingprovisionResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling bankingBankingprovisionResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling bankingBankingprovisionResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/banking/bankingprovision/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: banking/bankingprovision/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Bankingprovision
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Bankingprovision bankingBankingprovisionResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Bankingprovision> resp = bankingBankingprovisionResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: banking/bankingprovision/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Bankingprovision&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Bankingprovision> bankingBankingprovisionResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = bankingBankingprovisionResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Bankingprovision>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: banking/bankingprovision/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bankingBankingprovisionResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Bankingprovision> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bankingBankingprovisionResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Bankingprovision>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for bankingPaymentGet */
    private com.squareup.okhttp.Call bankingPaymentGetCall(String authorization, String organization, String where, String order, String skip, String take, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling bankingPaymentGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling bankingPaymentGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/banking/payment".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));
        if (where != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "where", where));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));
        if (take != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "take", take));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: banking/payment
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return Payment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Payment bankingPaymentGet(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        ApiResponse<Payment> resp = bankingPaymentGetWithHttpInfo(authorization, organization, where, order, skip, take);
        return resp.getData();
    }

    /**
     * get: banking/payment
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @return ApiResponse&lt;Payment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Payment> bankingPaymentGetWithHttpInfo(String authorization, String organization, String where, String order, String skip, String take) throws ApiException {
        com.squareup.okhttp.Call call = bankingPaymentGetCall(authorization, organization, where, order, skip, take, null, null);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: banking/payment (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param where Filter on one or more Api-Contract fields. Default: \&quot;\&quot; (optional, default to )
     * @param order Sorting by a field of Api-contract. Default:\&quot;\&quot; (optional, default to )
     * @param skip Number of records to be skipped. Default: 0 (optional, default to 0)
     * @param take Max. Number of result set. Default: 15 (optional, default to 15)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bankingPaymentGetAsync(String authorization, String organization, String where, String order, String skip, String take, final ApiCallback<Payment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bankingPaymentGetCall(authorization, organization, where, order, skip, take, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for bankingPaymentResourceIdGet */
    private com.squareup.okhttp.Call bankingPaymentResourceIdGetCall(String authorization, String organization, String resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling bankingPaymentResourceIdGet(Async)");
        }
        
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling bankingPaymentResourceIdGet(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling bankingPaymentResourceIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/banking/payment/{resourceId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organization != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organization", organization));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * get: banking/payment/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return Payment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Payment bankingPaymentResourceIdGet(String authorization, String organization, String resourceId) throws ApiException {
        ApiResponse<Payment> resp = bankingPaymentResourceIdGetWithHttpInfo(authorization, organization, resourceId);
        return resp.getData();
    }

    /**
     * get: banking/payment/id
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @return ApiResponse&lt;Payment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Payment> bankingPaymentResourceIdGetWithHttpInfo(String authorization, String organization, String resourceId) throws ApiException {
        com.squareup.okhttp.Call call = bankingPaymentResourceIdGetCall(authorization, organization, resourceId, null, null);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get: banking/payment/id (asynchronously)
     * 
     * @param authorization The authorization token. (required)
     * @param organization The corresponding ID for Mandanten, Kanzlei etc. (required)
     * @param resourceId The desired Api-Contract ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bankingPaymentResourceIdGetAsync(String authorization, String organization, String resourceId, final ApiCallback<Payment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bankingPaymentResourceIdGetCall(authorization, organization, resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
