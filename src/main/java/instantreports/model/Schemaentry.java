/**
 * CPM API
 * Public API for CPM
 *
 * OpenAPI spec version: V1.0
 * Contact: info@addison.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package instantreports.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;


/**
 * Schemaentry
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-03T09:33:53.199+02:00")
public class Schemaentry   {
/*  @SerializedName("schemaData")
  private SchemaData schemaData = null;*/

  @SerializedName("ledgerType")
  private String ledgerType = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("key")
  private String key = null;
/*
  public Schemaentry schemaData(SchemaData schemaData) {
    this.schemaData = schemaData;
    return this;
  }

   *//**
   * Get schemaData
   * @return schemaData
  **//*
  @ApiModelProperty(example = "null", value = "")
  public SchemaData getSchemaData() {
    return schemaData;
  }

  public void setSchemaData(SchemaData schemaData) {
    this.schemaData = schemaData;
  }*/

  public Schemaentry ledgerType(String ledgerType) {
    this.ledgerType = ledgerType;
    return this;
  }

   /**
   *  (filterable)
   * @return ledgerType
  **/
  @ApiModelProperty(example = "null", required = true, value = " (filterable)")
  public String getLedgerType() {
    return ledgerType;
  }

  public void setLedgerType(String ledgerType) {
    this.ledgerType = ledgerType;
  }

  public Schemaentry id(String id) {
    this.id = id;
    return this;
  }

   /**
   * 
   * @return id
  **/
  @ApiModelProperty(example = "f4206901-c9b2-4e6e-8119-f7d623626060", value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Schemaentry key(String key) {
    this.key = key;
    return this;
  }

   /**
   *  (filterable)
   * @return key
  **/
  @ApiModelProperty(example = "null", required = true, value = " (filterable)")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  /*@Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schemaentry schemaentry = (Schemaentry) o;
    return Objects.equals(this.schemaData, schemaentry.schemaData) &&
        Objects.equals(this.ledgerType, schemaentry.ledgerType) &&
        Objects.equals(this.id, schemaentry.id) &&
        Objects.equals(this.key, schemaentry.key);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaData, ledgerType, id, key);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schemaentry {\n");
    
    sb.append("    schemaData: ").append(toIndentedString(schemaData)).append("\n");
    sb.append("    ledgerType: ").append(toIndentedString(ledgerType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("}");
    return sb.toString();
  }*/

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

